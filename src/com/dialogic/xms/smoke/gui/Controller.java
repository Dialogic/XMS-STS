/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package com.dialogic.xms.smoke.gui;

import com.dialogic.xms.smoke.test.examples.EchoCallbackDemo;
import com.dialogic.xms.smoke.test.TestManager;
import com.dialogic.xms.smoke.test.examples.ConnectTest;
import com.dialogic.xms.smoke.test.examples.JoinTest;
import com.dialogic.xms.smoke.test.examples.LoadTest;
import com.dialogic.xms.smoke.test.examples.PlayRecordTest;
import com.dialogic.xms.smoke.test.examples.SimpleConferenceTest;
import com.dialogic.xms.smoke.test.examples.SimpleIVRTest;
import java.util.LinkedHashMap;
import java.util.Map;
import java.util.Observable;
import java.util.Observer;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JFrame;
import javax.swing.JOptionPane;
import javax.swing.UnsupportedLookAndFeelException;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.TableColumnModel;

/**
 *
 * @author ssatyana
 */
public class Controller extends javax.swing.JFrame implements Observer {

    static final Logger logger = Logger.getLogger(Controller.class.getName());
    static private Map<Object, String> testCaseMap = new LinkedHashMap<>();

    /**
     * Creates new form CallForm
     */
    public Controller() {
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException | InstantiationException | IllegalAccessException | UnsupportedLookAndFeelException ex) {
            logger.log(java.util.logging.Level.SEVERE, ex.getMessage(), ex);
        }
        initComponents();
        this.setVisible(true);
        this.setLocationRelativeTo(null);
        this.setDefaultCloseOperation(JFrame.DO_NOTHING_ON_CLOSE);        

        this.addWindowListener(new java.awt.event.WindowAdapter() {
            @Override
            public void windowClosing(java.awt.event.WindowEvent windowEvent) {
                if (cancelButton.isEnabled()) {
                    setDefaultCloseOperation(JFrame.DISPOSE_ON_CLOSE);
                    System.exit(0);
                }
            }
        });
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        outputTable = new javax.swing.JTable();
        jPanel2 = new javax.swing.JPanel();
        addButton = new javax.swing.JButton();
        testCaseComboBox = new javax.swing.JComboBox();
        runAllButton = new javax.swing.JButton();
        cancelButton = new javax.swing.JButton();
        removeButton = new javax.swing.JButton();
        clearAllButton = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Controller");

        jPanel1.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Run List", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Times New Roman", 1, 12), new java.awt.Color(0, 0, 153))); // NOI18N

        outputTable.setFont(new java.awt.Font("Calibri", 0, 12)); // NOI18N
        outputTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Test Case", "Status"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane1.setViewportView(outputTable);

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 466, Short.MAX_VALUE)
                .addContainerGap())
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 243, Short.MAX_VALUE)
                .addContainerGap())
        );

        jPanel2.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Select Test Case", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Times New Roman", 1, 12), new java.awt.Color(0, 0, 153))); // NOI18N

        addButton.setFont(new java.awt.Font("Calibri", 0, 12)); // NOI18N
        addButton.setText("Add");
        addButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addButtonActionPerformed(evt);
            }
        });

        testCaseComboBox.setFont(new java.awt.Font("Calibri", 0, 12)); // NOI18N
        testCaseComboBox.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "- none selected -", "ConnectTest", "EchoCallbackDemo", "JoinTest", "LoadTest", "PlayRecordTest", "SimpleConferenceTest", "SimpleIVRTest", " " }));

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(testCaseComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, 262, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(26, 26, 26)
                .addComponent(addButton, javax.swing.GroupLayout.PREFERRED_SIZE, 90, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(testCaseComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, 28, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(addButton, javax.swing.GroupLayout.DEFAULT_SIZE, 30, Short.MAX_VALUE))
                .addGap(0, 14, Short.MAX_VALUE))
        );

        runAllButton.setFont(new java.awt.Font("Calibri", 0, 12)); // NOI18N
        runAllButton.setText("Run All");
        runAllButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                runAllButtonActionPerformed(evt);
            }
        });

        cancelButton.setFont(new java.awt.Font("Calibri", 0, 12)); // NOI18N
        cancelButton.setText("Cancel");
        cancelButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cancelButtonActionPerformed(evt);
            }
        });

        removeButton.setFont(new java.awt.Font("Calibri", 0, 12)); // NOI18N
        removeButton.setText("Remove");
        removeButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                removeButtonActionPerformed(evt);
            }
        });

        clearAllButton.setFont(new java.awt.Font("Calibri", 0, 12)); // NOI18N
        clearAllButton.setText("Clear All");
        clearAllButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                clearAllButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                        .addGap(28, 28, 28)
                        .addComponent(runAllButton, javax.swing.GroupLayout.PREFERRED_SIZE, 79, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(26, 26, 26)
                        .addComponent(cancelButton, javax.swing.GroupLayout.PREFERRED_SIZE, 73, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(28, 28, 28)
                        .addComponent(removeButton)
                        .addGap(33, 33, 33)
                        .addComponent(clearAllButton)
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jPanel1, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(runAllButton)
                    .addComponent(cancelButton)
                    .addComponent(removeButton)
                    .addComponent(clearAllButton))
                .addGap(22, 22, 22))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void addButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addButtonActionPerformed
        DefaultTableModel model = (DefaultTableModel) this.outputTable.getModel();
        outputTable.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        if (testCaseComboBox.getSelectedItem().equals("- none selected -")) {
            JOptionPane.showMessageDialog(new JFrame(), "No test case selected, Please select any test case", "Dialog",
                    JOptionPane.ERROR_MESSAGE);
            return;
        }
        String test = this.testCaseComboBox.getSelectedItem().toString();

        if (test.equalsIgnoreCase("EchoCallbackDemo")) {
            EchoCallbackDemo echoTest = new EchoCallbackDemo();
            echoTest.addObserver(this);
            echoTest.configure();
            model.addRow(new Object[]{testCaseComboBox.getSelectedItem(), "Not Started"});
            testCaseMap.put(echoTest, testCaseComboBox.getSelectedItem().toString());
        } else if (test.equalsIgnoreCase("PlayRecordTest")) {
            PlayRecordTest playRecordTest = new PlayRecordTest();
            playRecordTest.addObserver(this);
            playRecordTest.configure();
            model.addRow(new Object[]{testCaseComboBox.getSelectedItem(), "Not Started"});
            testCaseMap.put(playRecordTest, testCaseComboBox.getSelectedItem().toString());
        } else if (test.equalsIgnoreCase("ConnectTest")) {
            ConnectTest connectTest = new ConnectTest();
            connectTest.addObserver(this);
            connectTest.configure();
            model.addRow(new Object[]{testCaseComboBox.getSelectedItem(), "Not Started"});
            testCaseMap.put(connectTest, testCaseComboBox.getSelectedItem().toString());
        } else if (test.equalsIgnoreCase("JoinTest")) {
            JoinTest joinTest = new JoinTest();
            joinTest.addObserver(this);
            joinTest.configure();
            model.addRow(new Object[]{testCaseComboBox.getSelectedItem(), "Not Started"});
            testCaseMap.put(joinTest, testCaseComboBox.getSelectedItem().toString());
        } else if (test.equalsIgnoreCase("SimpleConferenceTest")) {
            SimpleConferenceTest simpleConferenceTest = new SimpleConferenceTest();
            simpleConferenceTest.addObserver(this);
            simpleConferenceTest.configure();
            model.addRow(new Object[]{testCaseComboBox.getSelectedItem(), "Not Started"});
            testCaseMap.put(simpleConferenceTest, testCaseComboBox.getSelectedItem().toString());
        } else if (test.equalsIgnoreCase("SimpleIVRTest")) {
            SimpleIVRTest simpleIVR = new SimpleIVRTest();
            simpleIVR.addObserver(this);
            simpleIVR.configure();
            model.addRow(new Object[]{testCaseComboBox.getSelectedItem(), "Not Started"});
            testCaseMap.put(simpleIVR, testCaseComboBox.getSelectedItem().toString());
        } else if (test.equalsIgnoreCase("LoadTest")) {
            LoadTest loadTest = new LoadTest();
            loadTest.addObserver(this);
            loadTest.configure();
            model.addRow(new Object[]{testCaseComboBox.getSelectedItem(), "Not Started"});
            testCaseMap.put(loadTest, testCaseComboBox.getSelectedItem().toString());
        }
    }//GEN-LAST:event_addButtonActionPerformed

    private void cancelButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cancelButtonActionPerformed
        this.dispose();
        System.exit(0);
    }//GEN-LAST:event_cancelButtonActionPerformed

    private void runAllButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_runAllButtonActionPerformed
        try {
            if (outputTable.getRowCount() <= 0) {
                JOptionPane.showMessageDialog(new JFrame(), "No test case selected, Please select any test case", "Dialog",
                        JOptionPane.ERROR_MESSAGE);
                return;
            }
            System.out.println("TESTCASELIST -> " + testCaseMap);
            //this.cancelButton.setEnabled(false);
            this.runAllButton.setEnabled(false);
            new Thread(new TestManager(testCaseMap)).start();
        } catch (Exception ex) {
            logger.log(Level.SEVERE, ex.getMessage(), ex);
        }
    }//GEN-LAST:event_runAllButtonActionPerformed

    private void removeButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_removeButtonActionPerformed
        if (outputTable.getSelectedRow() != -1) {
            DefaultTableModel model = (DefaultTableModel) this.outputTable.getModel();
            model.removeRow(outputTable.getSelectedRow());
        }
    }//GEN-LAST:event_removeButtonActionPerformed

    private void clearAllButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_clearAllButtonActionPerformed
        DefaultTableModel model = (DefaultTableModel) this.outputTable.getModel();
        if (model.getRowCount() > 0) {
            for (int i = model.getRowCount() - 1; i > -1; i--) {
                model.removeRow(i);
            }
        }
    }//GEN-LAST:event_clearAllButtonActionPerformed

    public void enableButton() {
        this.cancelButton.setEnabled(true);
        this.runAllButton.setEnabled(true);
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton addButton;
    private javax.swing.JButton cancelButton;
    private javax.swing.JButton clearAllButton;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable outputTable;
    private javax.swing.JButton removeButton;
    private javax.swing.JButton runAllButton;
    private javax.swing.JComboBox testCaseComboBox;
    // End of variables declaration//GEN-END:variables

    @Override
    public void update(Observable o, Object o1) {
        String message = (String) o1;
        if (message.contains("Count")) {
            System.out.println(message);
            message = message.replace("Count:", "");
            for (int i = 1; i < Integer.parseInt(message); i++) {
                DefaultTableModel model = (DefaultTableModel) this.outputTable.getModel();
                model.addRow(new Object[]{testCaseComboBox.getSelectedItem(), "Not Started"});
                if (testCaseComboBox.getSelectedItem().toString().equalsIgnoreCase("EchoCallbackDemo")) {
                    EchoCallbackDemo echoTest = new EchoCallbackDemo();
                    echoTest.addObserver(this);
                    testCaseMap.put(echoTest, testCaseComboBox.getSelectedItem().toString());
                } else if (testCaseComboBox.getSelectedItem().toString().equalsIgnoreCase("PlayRecordTest")) {
                    PlayRecordTest playRecordTest = new PlayRecordTest();
                    playRecordTest.addObserver(this);
                    testCaseMap.put(playRecordTest, testCaseComboBox.getSelectedItem().toString());
                } else if (testCaseComboBox.getSelectedItem().toString().equalsIgnoreCase("ConnectTest")) {
                    ConnectTest connectTest = new ConnectTest();
                    connectTest.addObserver(this);
                    testCaseMap.put(connectTest, testCaseComboBox.getSelectedItem().toString());
                } else if (testCaseComboBox.getSelectedItem().toString().equalsIgnoreCase("JoinTest")) {
                    JoinTest joinTest = new JoinTest();
                    joinTest.addObserver(this);
                    testCaseMap.put(joinTest, testCaseComboBox.getSelectedItem().toString());
                } else if (testCaseComboBox.getSelectedItem().toString().equalsIgnoreCase("SimpleConferenceTest")) {
                    SimpleConferenceTest confTest = new SimpleConferenceTest();
                    confTest.addObserver(this);
                    testCaseMap.put(confTest, testCaseComboBox.getSelectedItem().toString());
                } else if (testCaseComboBox.getSelectedItem().toString().equalsIgnoreCase("SimpleIVRTest")) {
                    SimpleIVRTest simpleIVR = new SimpleIVRTest();
                    simpleIVR.addObserver(this);
                    testCaseMap.put(simpleIVR, testCaseComboBox.getSelectedItem().toString());
                } else if (testCaseComboBox.getSelectedItem().toString().equalsIgnoreCase("LoadTest")) {
                    LoadTest loadTest = new LoadTest();
                    loadTest.addObserver(this);
                    testCaseMap.put(loadTest, testCaseComboBox.getSelectedItem().toString());
                }
            }
        } else if (message.contains("CANCELLED")) {
            DefaultTableModel dtm = (DefaultTableModel) this.outputTable.getModel();
            int nRow = dtm.getRowCount(), nCol = dtm.getColumnCount();
            int j = 0;
            for (int i = 0; i < nRow; i++) {
                if (o.getClass().getSimpleName().equalsIgnoreCase(dtm.getValueAt(i, j).toString())) {
                    dtm.removeRow(i);
                    break;
                }
            }
        } else {
            DefaultTableModel dtm = (DefaultTableModel) this.outputTable.getModel();
            int nRow = dtm.getRowCount(), nCol = dtm.getColumnCount();
            int j = 0;
            for (int i = 0; i < nRow; i++) {
                if (dtm.getValueAt(i, j + 1).toString().equalsIgnoreCase("SUCCESS")
                        || dtm.getValueAt(i, j + 1).toString().equalsIgnoreCase("FAILURE")) {
                    continue;
                }
                if (o.getClass().getSimpleName().equalsIgnoreCase(dtm.getValueAt(i, j).toString())) {
                    dtm.setValueAt(message, i, j + 1);
                    if (message.equalsIgnoreCase("Call Connected")) {
                        this.cancelButton.setEnabled(false);
                    }
                    break;
                }
            }
        }
    }
}
